####### WINE Data 2 ######

from sklearn.datasets import load_wine
     
start_time = time.time()



#### WINE ######
wine_data = load_wine()
fn = [s.replace("/od315_of_diluted_wines", "") for s in list(wine_data.feature_names)]
target_list = list(wine_data.target)
wine_list = list(wine_data.data)
wine_list = [list(wine_list[i]) + [target_list[i]] for i in range(len(wine_list))]
wine_list = [fn + ["res"]] + wine_list
#### WINE ######


print("load_wine() finished", measure(start_time))
start_time = time.time()

reg = Deterministic_Regressor()

print("Deterministic_Regressor() finished", measure(start_time))
start_time = time.time()

# winners = reg.prepropcess_continous(wine_list, by_two=2, splitter=3, max_reg=3, thresh=0.25, add_quads=False, omit_similar=True, max_vars=3, include_all=True) # 
winners = reg.prepropcess_continous(wine_list, by_two=2, splitter=3, max_reg=5, thresh=5.00, add_quads=False, omit_similar=True, max_vars=3, include_all=True, sample_limit=300, 
                                    num_fit=3, use_multinomial=True) # 95.75%
start_time = time.time()

reg.show_regression_info()

print("winners", winners)

# reg.train_and_optimize_class(data_list=reg.get_train_dat_with_head(), expected_answers=winners, error_tolerance=0.05, max_dnf_len=3, min_match=0.03, 
#                              use_compact_opt=True, useUnion=False, use_stochastic=True) # 
reg.train_and_optimize_class(data_list=reg.get_train_dat_with_head(), expected_answers=winners, error_tolerance=0.05, max_dnf_len=3, min_match=0.03, 
                             use_compact_opt=True, useUnion=False, use_stochastic=False) # 

res = reg.solve_with_opt_continuous(reg.get_test_dat_with_head(), reg.get_test_dat_org_wo_head())
print("solve_with_opt_continuous() finished", measure(start_time))
start_time = time.time()

# print("res", res)
Deterministic_Regressor.show_stats(res, reg.get_test_res_wo_head(), average="weighted")

res = reg.solve_with_highest(reg.get_test_dat_org_wo_head())
print("solve_with_highest() finished", measure(start_time))
start_time = time.time()

# print("res", res)
Deterministic_Regressor.show_stats(res, reg.get_test_res_wo_head(), average="weighted")