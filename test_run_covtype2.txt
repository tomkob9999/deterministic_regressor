####### COV TYPE Data Body 2 ######

import warnings
from sklearn.exceptions import ConvergenceWarning

# Ignore convergence warnings from scikit-learn
warnings.filterwarnings("ignore", category=ConvergenceWarning, module="sklearn")
warnings.filterwarnings("ignore", category=UserWarning, module="sklearn")
start_time = time.time()

reg = Deterministic_Regressor()

print("Deterministic_Regressor() finished", measure(start_time))
start_time = time.time()

# winners = reg.prepropcess_continous(covtype_list, by_two=2, splitter=3, max_reg=5, thresh=0.25, add_quads=True, omit_similar=True, max_vars=2, include_all=True, use_multinomial=True) # 
# winners = reg.prepropcess_continous(covtype_list, by_two=2, splitter=3, max_reg=5, thresh=0.25, add_quads=True, omit_similar=True, max_vars=2, include_all=True, sample_limit=500, 
#                                     num_fit=1, use_multinomial=True) # 
# winners = reg.prepropcess_continous(covtype_list, by_two=2, splitter=3, max_reg=5, thresh=0.25, add_quads=True, omit_similar=True, max_vars=2, include_all=True, sample_limit=300, 
#                                     num_fit=3, use_multinomial=True) # 69.71
winners = reg.prepropcess_continous(covtype_list, by_two=2, splitter=3, max_reg=5, thresh=3.0, add_quads=True, omit_similar=True, max_vars=2, include_all=True, use_multinomial=True) #70.23% (0,3)
# winners = reg.prepropcess_continous(covtype_list, by_two=2, splitter=3, max_reg=10, thresh=10.0, add_quads=True, omit_similar=True, max_vars=2, include_all=True, use_multinomial=True) # 68.20% (0,6)
start_time = time.time()

reg.show_regression_info()

# print("winners", winners)

# reg.train_and_optimize_class(data_list=reg.get_train_dat_with_head(), expected_answers=winners, error_tolerance=0.05, max_dnf_len=3, min_match=0.03, 
#                              use_compact_opt=True, useUnion=False, use_stochastic=True) # 
reg.train_and_optimize_class(data_list=reg.get_train_dat_with_head(), expected_answers=winners, error_tolerance=0.05, max_dnf_len=3, min_match=0.03, 
                             use_compact_opt=True, useUnion=False, use_stochastic=False) # 

res = reg.solve_with_opt_continuous(reg.get_test_dat_with_head(), reg.get_test_dat_org_wo_head())
print("solve_with_opt_continuous() finished", measure(start_time))
start_time = time.time()

# print("res", res)
Deterministic_Regressor.show_stats(res, reg.get_test_res_wo_head(), average="weighted")

res = reg.solve_with_highest(reg.get_test_dat_org_wo_head())
print("solve_with_highest() finished", measure(start_time))
start_time = time.time()

# print("res", res)
Deterministic_Regressor.show_stats(res, reg.get_test_res_wo_head(), average="weighted")