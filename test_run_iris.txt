####### IRIS Data ######

import copy
from sklearn.metrics import precision_score, recall_score, f1_score
from sklearn.datasets import load_breast_cancer
from sklearn.model_selection import train_test_split
from sklearn.tree import DecisionTreeClassifier
from sklearn.metrics import accuracy_score, classification_report
from sklearn.datasets import load_iris

import time

def measure(start_time):
    end_time = time.time()

    elapsed_time = end_time - start_time
    minutes, seconds = divmod(elapsed_time, 60)
    milliseconds = int(elapsed_time * 1000 % 1000)
    return f"{int(minutes)}:{str(int(seconds)).zfill(2)}:{str(int(milliseconds)).zfill(3)}"
           
start_time = time.time()



# ###### FOR BULK OR CLASS #######

#### IRIS ######
iris = load_iris()
X = iris.data  # Features
y = iris.target  # Labels
s = [s.replace(" (cm)", "").replace(" ", "_") for s in iris.feature_names]
data_list = [s] + [list(x) for x in X]
data_list[0].append("res")
for i in range(1, len(data_list), 1):
    data_list[i].append(y[i-1])
#### IRIS ######


print("load_iris() finished", measure(start_time))
start_time = time.time()


reg = Deterministic_Regressor()

print("Deterministic_Regressor() finished", measure(start_time))
start_time = time.time()

reg.prepropcess(data_list, by_two=3)
print("prepropcess() finished", measure(start_time))
start_time = time.time()

reg.train_and_optimize_class(data_list=reg.get_train_dat_with_head(), expected_answers=reg.get_train_res_wo_head(), error_tolerance=0.00, max_dnf_len=4, min_match=0.03, solve_method=["union", "common"])
print("train_and_optimize_class() finished", measure(start_time))
start_time = time.time()

res = reg.solve_with_opt_class(reg.get_test_dat_with_head())
print("solve_with_opt_class() finished", measure(start_time))
start_time = time.time()

answer = reg.get_test_res_wo_head()


if len(res) > 0:
    print("Predicted")
    print(res)
    print("Actual")
    print(answer)


    precision = precision_score(answer, res, average='weighted')
    recall = recall_score(answer, res, average='weighted')
    f1 = f1_score(answer, res, average='weighted')

    print(f"Precision: {precision * 100:.2f}%")
    print(f"Recall: {recall * 100:.2f}%")
    print(f"F1 Score: {f1 * 100:.2f}%")

